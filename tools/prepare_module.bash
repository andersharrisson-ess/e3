#!/bin/bash
#
#  Copyright (c) 2017 - Present Jeong Han Lee
#  Copyright (c) 2017 - Present European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
#
#   author  : Jeong Han Lee
#   email   : jeonghan.lee@gmail.com
#   date    : Tuesday, December 12 17:44:34 CET 2017
#   version : 0.1.2

declare -gr SC_SCRIPT="$(realpath "$0")"
declare -gr SC_SCRIPTNAME=${0##*/}
declare -gr SC_TOP="$(dirname "$SC_SCRIPT")"
declare -gr SC_LOGDATE="$(date +%Y%b%d-%H%M-%S%Z)"
declare -gr SC_USER="$(whoami)"
declare -gr SC_HASH="$(git rev-parse HEAD)"


function pushd { builtin pushd "$@" > /dev/null; }
function popd  { builtin popd  "$@" > /dev/null; }

. prepare_module.cfg



function git_clone {

    local rep_name=$1
    ${GIT_CMD} clone ${GIT_URL}/$rep_name
    
}


function submodule_add {

    local rep_url=${1}
    local env_mod_name=${2}
    printf "${rep_url} is adding as submodule...\n";
    ${GIT_CMD} submodule add ${rep_url};
    echo "add ignore = all ... "
    sed -i~ "/\\/${env_mod_name}/a\\\tignore = all" .gitmodules
    printf "\n";
    
}



function usage
{
    {
	echo "";
	echo "Usage    : $0 [-m <mod_name> ] [-h <mod_url>] [-s <mod_src_name>]";
	echo "";
	echo "Examples : ";
	echo "          -m ipmiComm -h \"https://github.com/icshwi\" ";
	echo "          -m axiscore -h \"https://bitbucket.org/europeanspallationsource\" -s \"m-epics-axiscore\"";
	echo "          -m devlib2  -h \"https://github.com/epics-modules\" ";
	echo "          -m opcUaUnifiedAutomation -h \"https://github.com/bkuner\" ";
    } 1>&2;
    exit 1; 
}

 
while getopts " :m:s:h:" opt; do
    case "${opt}" in
	m)
	    MODULE_NAME=${OPTARG}
	    ;;
	s)
	    MODULE_SRC_PATH=${OPTARG}
	    ;;
	h)
	    MODULE_URL=${OPTARG}
	    ;;
	*)
	    usage
	    ;;
    esac
done
shift $((OPTIND-1))

if [ -z "${MODULE_NAME}" ] || [ -z "${MODULE_URL}" ]; then
    usage
fi

if [ -z "${MODULE_SRC_PATH}" ] && ! [ -z "${MODULE_NAME}" ]; then
    MODULE_SRC_PATH=${MODULE_NAME}
fi
    

# echo ${MODULE_NAME}
# echo ${MODULE_SRC_PATH}
# echo ${MODULE_URL}


mod_url=${MODULE_URL}/${MODULE_SRC_PATH}

echo "${mod_url}"


${GIT_CMD} clone ${ICS_GIT_URL}/e3-${MODULE_NAME}

pushd e3-${MODULE_NAME}


touch ${LOG}
{
    echo "${SC_USER} ${SC_LOGDATE} ";
    echo "${MODULE_NAME}";
    echo "${mod_url}";
    echo "" ;
} >> ${LOG}



echo $PWD

submodule_add "${env_url}" "${ENV_MOD_NAME}"
submodule_add "${mod_url}" "${MODULE_SRC_NAME}"

${GIT_CMD} submodule update --init --recursive --recursive


cat > .gitignore <<EOF
*~
*-dev
modules.order
Module.symvers
Mkfile.old
dkms.conf
core.*
#*
.#*
\#*
EOF

cat > Makefile <<EOF
#
#  Copyright (c) 2017 - Present  European Spallation Source ERICq
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# 
# Author  : ${SC_USER}
# email   : @esss.se
# Date    : generated by ${SC_LOGDATE}
# version : 0.0.0 
#
# template file is generated by $0 with ${SC_HASH}
#
TOP:=\$(CURDIR)

ifneq (,\$(findstring dev,\$(MAKECMDGOALS)))
include \$(TOP)/configure/CONFIG_DEV
else
include \$(TOP)/configure/CONFIG
endif

-include \$(TOP)/\$(E3_ENV_PATH)/\$(E3_ENV_NAME)

include \$(TOP)/configure/MK_DEFINES

include \$(TOP)/configure/BUILD_E3

include \$(TOP)/configure/BUILD_DB

# Build Rule for Community EPICS Building
include \$(TOP)/configure/BUILD_EPICS

# Build Rule for Development Mode
ifneq (,\$(findstring dev,\$(MAKECMDGOALS)))
include \$(TOP)/configure/BUILD_DEV
endif


EOF


mkdir -p configure



cat > configure/CONFIG_DEV <<EOF
EPICS_MODULE_NAME:=${MODULE_NAME}
# This is the module source tag
# *) individual tags
#    export EPICS_MODULE_TAG:=tags/1.1.1
# *) master branch 
#    export EPICS_MODULE_TAG:=master
# *) individual hash 
export EPICS_MODULE_TAG:=master
export EPICS_MODULE_SRC_PATH:=${MODULE_SRC_PATH}-dev
export ESS_MODULE_MAKEFILE:=\$(EPICS_MODULE_NAME).Makefile
export PROJECT:=\$(EPICS_MODULE_NAME)
export LIBVERSION:=develop
export E3_ENV_PATH:=e3-env
export E3_ENV_NAME:=e3-env
#export E3_ENV_NAME:=E3_ENV_CONF
export E3_ENV_TAG:=master
# 
#export DEV_GIT_URL:="https://where your git repo"
export DEV_GIT_URL:="${mod_url}"
EOF



cat > configure/CONFIG <<EOF
EPICS_MODULE_NAME:=${MODULE_NAME}
# This is the module source tag
# *) individual tags
#    export EPICS_MODULE_TAG:=tags/1.1.1
# *) master branch 
#    export EPICS_MODULE_TAG:=master
# *) individual hash 
export EPICS_MODULE_TAG:=master
export EPICS_MODULE_SRC_PATH:=${MODULE_SRC_PATH}
export ESS_MODULE_MAKEFILE:=\$(EPICS_MODULE_NAME).Makefile
export PROJECT:=\$(EPICS_MODULE_NAME)
export LIBVERSION:=0.0.1
export E3_ENV_PATH:=e3-env
export E3_ENV_NAME:=e3-env
#export E3_ENV_NAME:=E3_ENV_CONF
#export E3_ENV_TAG:=v0.1
EOF




cat > configure/MK_DEFINES <<EOF
# Keep always the module up-to-date
define git_update =
@git submodule deinit -f \$@/
git submodule deinit -f \$@/
sed -i '/submodule/,$$d'  \$(TOP)/.git/config
rm -rf \$(TOP)/.git/modules/\$@
git submodule init \$@/
git submodule update --init --recursive \$@/.
git submodule update --remote --merge \$@/
endef

ifndef VERBOSE
  QUIET := @
endif

ifdef DEBUG_SHELL
  SHELL = /bin/sh -x
endif

EOF



cat > configure/BUILD_E3 <<EOF
# Pass necessary driver.makefile variables through makefile options
#
M_OPTIONS := -C \$(EPICS_MODULE_SRC_PATH)
M_OPTIONS += -f \$(ESS_MODULE_MAKEFILE)
M_OPTIONS += LIBVERSION="\$(LIBVERSION)"
M_OPTIONS += PROJECT="\$(PROJECT)"
M_OPTIONS += EPICS_MODULES="\$(EPICS_MODULES)"
M_OPTIONS += EPICS_LOCATION="\$(EPICS_LOCATION)"
M_OPTIONS += DEFAULT_EPICS_VERSIONS="\$(DEFAULT_EPICS_VERSIONS)"
M_OPTIONS += BUILDCLASSES="Linux"


.PHONY: help default install uninstall build rebuild clean help2 init git-submodule-sync \$(EPICS_MODULE_SRC_PATH) cehckout \$(E3_ENV_NAME) env conf


# # help is defined in 
# # https://gist.github.com/rcmachado/af3db315e31383502660
help:
	\$(info --------------------------------------- )	
	\$(info Available targets)
	\$(info --------------------------------------- )
	\$(QUIET) awk '/^[a-zA-Z\-\_0-9]+:/ {            \\
	  nb = sub( /^## /, "", helpMsg );              \\
	  if(nb == 0) {                                 \\
	    helpMsg = \$\$0;                              \\
	    nb = sub( /^[^:]*:.* ## /, "", helpMsg );   \\
	  }                                             \\
	  if (nb)                                       \\
	    print  \$\$1 "\t" helpMsg;                    \\
	}                                               \\
	{ helpMsg = \$\$0 }'                              \\
	\$(MAKEFILE_LIST) | column -ts:	


default: help


install: uninstall
	\$(QUIET) sudo -E bash -c 'make \$(M_OPTIONS) install'

## Uninstall \$(PROJECT) Module in order not to use it
uninstall: conf
	\$(QUIET) sudo -E bash -c 'make \$(M_OPTIONS) uninstall'



## Build the EPICS Module : \${MODULE_NAME} 
build: conf
	\$(QUIET) make \$(M_OPTIONS) build


## clean, build, and install the EPICS Module : \${MODULE_NAME}
rebuild: clean build install


## Clean the EPICS Module : \${MODULE_NAME}
clean: conf
	\$(QUIET) make \$(M_OPTIONS) clean


## Show driver.makefile help
help2:
	\$(QUIET) make \$(M_OPTIONS) help

#
## Initialize EPICS BASE and E3 ENVIRONMENT Module
init: git-submodule-sync \$(EPICS_MODULE_SRC_PATH) \$(E3_ENV_NAME)

git-submodule-sync:
	\$(QUIET) git submodule sync


\$(EPICS_MODULE_SRC_PATH): 
	\$(QUIET) \$(git_update)
	cd \$@ && git checkout \$(EPICS_MODULE_TAG)


checkout: 
	cd \$(EPICS_MODULE_SRC_PATH) && git checkout \$(EPICS_MODULE_TAG)


\$(E3_ENV_NAME): 
	\$(QUIET) \$(git_update)


## Print EPICS and ESS EPICS Environment variables
env:
	\$(QUIET) echo ""
	\$(QUIET) echo "EPICS_MODULE_SRC_PATH       : "\$(EPICS_MODULE_SRC_PATH)
	\$(QUIET) echo "ESS_MODULE_MAKEFILE         : "\$(ESS_MODULE_MAKEFILE)
	\$(QUIET) echo "EPICS_MODULE_TAG            : "\$(EPICS_MODULE_TAG)
	\$(QUIET) echo "LIBVERSION                  : "\$(LIBVERSION)
	\$(QUIET) echo "PROJECT                     : "\$(PROJECT)
	\$(QUIET) echo ""
	\$(QUIET) echo "----- >>>> EPICS BASE Information <<<< -----"
	\$(QUIET) echo ""
	\$(QUIET) echo "EPICS_BASE_TAG              : "\$(EPICS_BASE_TAG)
	\$(QUIET) echo "CROSS_COMPILER_TARGET_ARCHS : "\$(CROSS_COMPILER_TARGET_ARCHS)
	\$(QUIET) echo ""
	\$(QUIET) echo "----- >>>> Default ESS EPICS Environment  <<<< -----"
        \$(QUIET) echo ""
        \$(QUIET) echo "EPICS_LOCATION              : "\$(ESS_EPICS_PATH)
        \$(QUIET) echo "EPICS_MODULES               : "\$(REQUIRE_PATH)
        \$(QUIET) echo "DEFAULT_EPICS_VERSION       : "\$(DEFAULT_EPICS_VERSION)
        \$(QUIET) echo "BASE_INSTALL_LOCATION       : "\$(BASE_INSTALL_LOCATION)
        \$(QUIET) echo "REQUIRE_VERSION             : "\$(REQUIRE_VERSION)
        \$(QUIET) echo "REQUIRE_PATH                : "\$(REQUIRE_PATH)
        \$(QUIET) echo "REQUIRE_TOOLS               : "\$(REQUIRE_TOOLS)
        \$(QUIET) echo "REQUIRE_BIN                 : "\$(REQUIRE_BIN)
        \$(QUIET) echo ""


# Copy ${MODULE_NAME}.Makefile into its source path
conf:
	\$(QUIET) install -m 644 \$(TOP)/\$(ESS_MODULE_MAKEFILE)  \$(EPICS_MODULE_SRC_PATH)/


EOF



cat > configure/BUILD_DB <<EOF

## This RULE should be used in case of inflating DB files
## 

#.PHONY: db

### We have to think how to find \$(EPICS_BASE) and
### \$(EPICS_HOST_ARCH) during driver.makefile
### Friday, November  3 16:44:55 CET 2017, jhlee
### Currently feasible solutoin without touching driver.makefile
### is the following:
###
### 0) source setE3Env.bash 3.15.4
### 1) make db
### 2) make install
### 3) source setE3Env.bash 3.15.5
### 4) make db
### 5) make install 
###   ..... 

#db: conf
#	\$(QUIET) make \$(M_OPTIONS) db

EOF



cat > configure/BUILD_EPICS <<EOF

# One should define the any dependency modules and EPICS base path
# in the following directory

-include \$(TOP)/\$(E3_ENV_NAME)/epics-community-env

.PHONY: epics epics-clean

epics:
	\$(QUIET)echo "EPICS_BASE=\$(COMMUNITY_EPICS_BASE)"  > \$(TOP)/\$(EPICS_MODULE_SRC_PATH)/configure/RELEASE
	\$(QUIET)echo "INSTALL_LOCATION=\$(M_IOCSTATS)" > \$(TOP)/\$(EPICS_MODULE_SRC_PATH)/configure/CONFIG_SITE	
	sudo -E bash -c "\$(MAKE) -C \$(EPICS_MODULE_SRC_PATH)"

epics-clean:
	sudo -E bash -c "\$(MAKE) -C \$(EPICS_MODULE_SRC_PATH) clean"

EOF




cat > configure/BUILD_DEV <<EOF

.PHONY: devinit devenv devbuild devclean devrebuild devuninstall devdistclean

## Cloning the Module, which is independent of git submodule
#  Should define \$(DEV_GIT_URL) in configure/CONFIG_DEV 
#
devinit: git-submodule-sync  \$(E3_ENV_NAME)
	git clone \$(DEV_GIT_URL) \$(EPICS_MODULE_SRC_PATH)
	cd \$(EPICS_MODULE_SRC_PATH) && git checkout \$(EPICS_MODULE_TAG)

devenv: env
	cd \$(E3_ENV_PATH) && git checkout \$(E3_ENV_TAG)

devbuild: build
devclean: clean
devrebuild: rebuild
devuninstall :uninstall
devdistclean: clean
	\$(QUIET)echo "Removing \$(EPICS_MODULE_SRC_PATH) ......... "
	rm -rf \$(EPICS_MODULE_SRC_PATH)
	
EOF






cat > ${MODULE_NAME}.Makefile <<EOF
#
#  Copyright (c) 2017 - Present  European Spallation Source ERIC
#
#  The program is free software: you can redistribute
#  it and/or modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation, either version 2 of the
#  License, or any newer version.
#
#  This program is distributed in the hope that it will be useful, but WITHOUT
#  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
#  more details.
#
#  You should have received a copy of the GNU General Public License along with
#  this program. If not, see https://www.gnu.org/licenses/gpl-2.0.txt
#
# 
# Author  : ${SC_USER}
# email   : ${SC_USER}@esss.se
# Date    : generated by ${SC_LOGDATE}
# version : 0.0.0 
#
# template file is generated by $0 with ${SC_HASH}

# Please look at many other _module_.Makefile in e3-* repository
# 

#where_am_I := \$(dir \$(abspath \$(lastword \$(MAKEFILE_LIST))))

include \$(REQUIRE_TOOLS)/driver.makefile

# APP:=calcApp
# APPDB:=\$(APP)/Db
# APPSRC:=\$(APP)/src


# USR_INCLUDES += -I\$(where_am_I)/\$(APPSRC)

# USR_CFLAGS   += -Wno-unused-variable
# USR_CFLAGS   += -Wno-unused-function
# USR_CFLAGS   += -Wno-unused-but-set-variable
# USR_CPPFLAGS += -Wno-unused-variable
# USR_CPPFLAGS += -Wno-unused-function
# USR_CPPFLAGS += -Wno-unused-but-set-variable

# TEMPLATES += \$(wildcard \$(APPDB)/*.db)

# DBDINC_SRCS += \$(APPSRC)/swaitRecord.c
# DBDINC_SRCS += \$(APPSRC)/sseqRecord.c
# DBDINC_SRCS += \$(APPSRC)/aCalcoutRecord.c
# DBDINC_SRCS += \$(APPSRC)/sCalcoutRecord.c
# DBDINC_SRCS += \$(APPSRC)/transformRecord.c

# DBDINC_DBDS = \$(subst .c,.dbd,   \$(DBDINC_SRCS:\$(APPSRC)/%=%))
# DBDINC_HDRS = \$(subst .c,.h,     \$(DBDINC_SRCS:\$(APPSRC)/%=%))
# DBDINC_DEPS = \$(subst .c,\$(DEP), \$(DBDINC_SRCS:\$(APPSRC)/%=%))


# HEADERS += \$(APPSRC)/sCalcPostfix.h
# HEADERS += \$(APPSRC)/aCalcPostfix.h
# HEADERS += \$(DBDINC_HDRS)


# SOURCES += \$(APPSRC)/sCalcPostfix.c
# SOURCES += \$(APPSRC)/sCalcPerform.c
# SOURCES += \$(APPSRC)/aCalcPostfix.c
# SOURCES += \$(APPSRC)/aCalcPerform.c

# SOURCES += \$(APPSRC)/calcUtil.c
# SOURCES += \$(APPSRC)/myFreeListLib.c
# SOURCES += \$(APPSRC)/devsCalcoutSoft.c
# SOURCES += \$(APPSRC)/devaCalcoutSoft.c
# SOURCES += \$(APPSRC)/subAve.c
# SOURCES += \$(APPSRC)/swaitRecord.c
# SOURCES += \$(APPSRC)/editSseq.st
# SOURCES += \$(APPSRC)/interp.c
# SOURCES += \$(APPSRC)/arrayTest.c
# SOURCES += \$(APPSRC)/aCalcMonitorMem.c
# # DBDINC_SRCS should be last of the series of SOURCES
# SOURCES += \$(DBDINC_SRCS)

# DBDS += \$(APPSRC)/calcSupport_LOCAL.dbd
# DBDS += \$(APPSRC)/calcSupport_withSNCSEQ.dbd
# DBDS += \$(APPSRC)/calcSupport_withSSCAN.dbd


# \$(DBDINC_DEPS): \$(DBDINC_HDRS)

# .dbd.h:
# 	\$(DBTORECORDTYPEH)  \$(USR_DBDFLAGS) -o $@ $<


# The following lines could be useful if one uses the external lib
#
# Examples...
# 
# USR_CFLAGS += -fPIC
# USR_CFLAGS   += -DDEBUG_PRINT
# USR_CPPFLAGS += -DDEBUG_PRINT
# USR_CPPFLAGS += -DUSE_TYPED_RSET
# USR_INCLUDES += -I/usr/include/libusb-1.0
# USR_LDFLAGS += -lusb-1.0
# USR_LDFLAGS += -L /opt/etherlab/lib
# USR_LDFLAGS += -lethercat
# USR_LDFLAGS += -Wl,-rpath=/opt/etherlab/lib

## SYSTEM LIBS 
##
# USR_LIBS += boost_regex
# USR_LIBS += readline
# USR_LIBS += xml2

#


EOF

popd



cd e3-${MODULE_NAME}

git add ${LOG}
git add .gitignore
git add .gitmodules
git add configure/*
git add ${MODULE_NAME}.Makefile
git add Makefile


printf "\n"
printf "Please edit configuration files in configure/* \n";
printf "Please edit ${MODULE_NAME}.Makefile for matching ${MODULE_NAME}\n";
printf "\n"
